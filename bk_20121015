//============================================================================
// Name        : Empty.cpp
// Author      :
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================
#include <iostream>
#include <cv.h>
#include <highgui.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include "libfreenect.h"
#include <pthread.h>
#include <GL/glut.h>
#include <GL/gl.h>
#include <GL/glu.h>
#include <math.h>
#include <pthread.h>
#include "libfreenect_sync.h"
#include <math.h>

#include "/root/workspace/include-files/cvideo.h"
#include "/root/workspace/include-files/load_image.h"
#include "/root/workspace/include-files/utility.h"
#include "/root/workspace/include-files/viewer.h"
#include "/root/workspace/include-files/TCPServerSocket.h"
#include "/root/workspace/include-files/TCPClientSocket.h"
#include "/root/workspace/include-files/image_processing.h"

#define numOfCamera 1
bool proximityViewEnabled=false;
utility util;
TCPClientSocket client1;
cvideo encoder;

using namespace std;

char *depth_mid, *depth_front;
char *rgb_back, *rgb_mid, *rgb_front;
char *backgroudnImage_mean;

int gwidth=640;
int gheight=480;
int got_depth = 0;
char t_gamma[2048];

int freenect_led;
freenect_context *f_ctx;
freenect_device *f_dev;
freenect_video_format requested_format = FREENECT_VIDEO_RGB;
freenect_video_format current_format = FREENECT_VIDEO_RGB;
freenect_resolution requested_resolution = FREENECT_RESOLUTION_MEDIUM;
freenect_resolution current_resolution = FREENECT_RESOLUTION_MEDIUM;
pthread_mutex_t depth_mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t video_mutex = PTHREAD_MUTEX_INITIALIZER;

class Camera{

public:
	IplImage* rgbImage;
	IplImage* depthImage;
	IplImage* grayImage;
	IplImage* intermediateImage;
	int cameraIndex;
	unsigned int width;
	unsigned int height;
	char* rawrgbImage;
	short* rawdepthImage;
	char* rawCharDepthImage;
	char* rawgrayImage;

	void init(int index);
private:

};

void Camera::init(int index)
{
	width=gwidth;
	height=gheight;
	rawgrayImage=new char[width*height];
	rgbImage=cvCreateImage( cvSize(width, height), IPL_DEPTH_8U, 3 );
	depthImage=cvCreateImage( cvSize(width, height), IPL_DEPTH_8U, 1 );
	grayImage=cvCreateImage( cvSize(width, height), IPL_DEPTH_8U, 1 );
	intermediateImage=cvCreateImage( cvSize(width, height), IPL_DEPTH_8U, 1 );
	cameraIndex=index;

}

void depth_cb(freenect_device *dev, void *v_depth, uint32_t timestamp)
{
	int i;
	uint16_t *depth = (uint16_t*)v_depth;

	pthread_mutex_lock(&depth_mutex);
	for (i=0; i<640*480; i++) {
		int pval = t_gamma[depth[i]];
		int lb = pval & 0xff;
		switch (pval>>8) {
		case 0:
			depth_mid[3*i+0] = 255;
			depth_mid[3*i+1] = 255-lb;
			depth_mid[3*i+2] = 255-lb;
			break;
		case 1:
			depth_mid[3*i+0] = 255;
			depth_mid[3*i+1] = lb;
			depth_mid[3*i+2] = 0;
			break;
		case 2:
			depth_mid[3*i+0] = 255-lb;
			depth_mid[3*i+1] = 255;
			depth_mid[3*i+2] = 0;
			break;
		case 3:
			depth_mid[3*i+0] = 0;
			depth_mid[3*i+1] = 255;
			depth_mid[3*i+2] = lb;
			break;
		case 4:
			depth_mid[3*i+0] = 0;
			depth_mid[3*i+1] = 255-lb;
			depth_mid[3*i+2] = 255;
			break;
		case 5:
			depth_mid[3*i+0] = 0;
			depth_mid[3*i+1] = 0;
			depth_mid[3*i+2] = 255-lb;
			break;
		default:
			depth_mid[3*i+0] = 0;
			depth_mid[3*i+1] = 0;
			depth_mid[3*i+2] = 0;
			break;
		}
	}
	got_depth++;
	pthread_mutex_unlock(&depth_mutex);
}

short* GrabKinectDepthImage(Camera data)
{
	short *depth = 0;
	uint32_t ts;
	if (freenect_sync_get_depth((void**)&depth, &ts, data.cameraIndex, FREENECT_DEPTH_11BIT) < 0)
	{
		printf("Kinect is not connected\n");
		exit(1);
	}
	return depth;
}

char* GrabDepthImageChar(int deviceIndex)
{
	char *depth = 0;
	uint32_t ts;
	if (freenect_sync_get_depth((void**)&depth, &ts, deviceIndex, FREENECT_DEPTH_11BIT) < 0)
	{
		printf("Kinect is not connected\n");
		exit(1);
	}
	return depth;
}


char* GrabKinectRGBImage(int deviceIndex){
	char* returnImage=0;
	uint32_t ts;
	if(freenect_sync_get_video((void**)&returnImage, &ts, deviceIndex, 	FREENECT_VIDEO_RGB )<0)
	{
		printf("Kinect is not connected\n");
		exit(1);
	}
	//	save_ppm("/home/sklee25/Desktop/kinect_depth.ppm",returnImage,640,480);
	//	getchar();
	return returnImage;
}

void GrabKinectGrayImage(Camera data){
	uint32_t ts;
	if(freenect_sync_get_video((void**)&data.rawrgbImage, &ts, data.cameraIndex, FREENECT_VIDEO_RGB)<0)
	{
		printf("Kinect is not connected\n");
		exit(1);
	}

	convertToGrayScale(data.rawrgbImage, data.rawgrayImage, gwidth,gheight);
	//	delete rgbImage;
}





void initKinect()
{
	if (freenect_init(&f_ctx, NULL) < 0) {
		printf("freenect_init() failed\n");
	}
	freenect_set_log_level(f_ctx, FREENECT_LOG_DEBUG);
	freenect_select_subdevices(f_ctx, (freenect_device_flags)(FREENECT_DEVICE_MOTOR | FREENECT_DEVICE_CAMERA));

	int nr_devices = freenect_num_devices (f_ctx);
	printf ("Number of devices found: %d\n", nr_devices);
}



int proximityViewSwitch(short* depthImage1, short* depthImage2, int height, int width)
{
	int cameraID=0;
	int sum1=0;
	int sum2=0;
	int index=0;
	for(int i=0;i<height;i++)
	{
		for(int j=0;j<width;j++)
		{
			int pixel1=depthImage1[index];
			int pixel2=depthImage2[index];
			sum1=sum1+pixel1;
			sum2=sum2+pixel2;
			index++;
		}
	}
	sum1=sum1/(height*width);
	sum2=sum2/(height*width);
	if(sum1<sum2)
	{
		cameraID=1;
	}
	else
	{
		cameraID=0;
	}

	return cameraID;
}

void DWTTest(Camera data)
{

	int compressedRateDWT=4;
	//	char* grayImage=data.rawCharDepthImage;

	double* dwtOrgImage=NULL;
	int* oneMergeFilter=NULL;
	char* sendBuffer=NULL;
	int* blockTopLeft=NULL;
	blockTopLeft=new int[(data.width*data.height)];

	dwtOrgImage=util.convertShort1DToDouble1D(data.rawdepthImage,data.width,data.height);
	oneMergeFilter=encoder.getEncodedDWT(dwtOrgImage,data.width,data.height);


	//	save_pgm("/home/sklee25/Desktop/image_result_dwt/venus_synthesized_orig.pgm",sendBuffer,data.width,data.height);
	//ok

	//	int* orgIntSendBuffer=encoder.getDWTBlock(oneMergeFilter,Width,Height,compressedRateDWT);


	for(int i=0;i<(int)(data.width*data.height/4);i++)
	{
		int indexY=i/(data.width/2);
		int indexX=i%(data.width/2);

		//		blockTopLeft[(Width*indexY)+indexX]=oneMergeFilter[(Width*indexY)+indexX];
		blockTopLeft[i]=oneMergeFilter[(data.width*indexY)+indexX];
	}

	sendBuffer=util.convertIntToUintChar1D(blockTopLeft,data.width*data.height);

	//	int orgArraySize=(Width*Height)/compressedRateDWT;
	//
	int orgArraySize=(data.width*data.height)/compressedRateDWT;
	//	save_pgm("/home/sklee25/Desktop/image_result_dwt/3dwless_synthesized_orig.pgm",sendBuffer,data.width,data.height);
	//	getchar();
	client1.EstablishConnection("163.152.21.249",6000);
	client1.SendData(client1.sock, sendBuffer, orgArraySize);
	delete[] sendBuffer;
	delete[] blockTopLeft;
	delete[] oneMergeFilter;
	delete[] dwtOrgImage;

	sendBuffer=NULL;
	blockTopLeft=NULL;
	oneMergeFilter=NULL;
	dwtOrgImage=NULL;

	//	free(sendBuffer);
	//	free(blockTopLeft);
	//	free(oneMergeFilter);
	//	free(dwtOrgImage);
	//	getchar();

}

void DWTTestMerge(Camera data)
{

	int compressedRateDWT=2;
	//	char* grayImage=data.rawCharDepthImage;

	double* dwtOrgImage=NULL;
	double* dwtGrayImage=NULL;
	int* oneMergeFilter=NULL;
	int* oneMergeFilterGray=NULL;
	char* sendBuffer=NULL;
	int* blockTopLeft=NULL;
	blockTopLeft=new int[(data.width*data.height)/compressedRateDWT];

	dwtOrgImage=util.convertShort1DToDouble1D(data.rawdepthImage,data.width,data.height);
	dwtGrayImage=util.convertChar1DToDouble1D(data.rawgrayImage,data.width,data.height);

	oneMergeFilter=encoder.getLowFreqArrayExt(dwtOrgImage,data.width,data.height);
	oneMergeFilterGray=encoder.getLowFreqArrayExt(dwtGrayImage,data.width,data.height);

	//	save_pgm("/home/sklee25/Desktop/image_result_dwt/venus_synthesized_orig.pgm",sendBuffer,data.width,data.height);
	//ok

	//	int* orgIntSendBuffer=encoder.getDWTBlock(oneMergeFilter,Width,Height,compressedRateDWT);

	int indexForGray=data.width*data.height/4;

	for(int i=0;i<(int)(data.width*data.height/4);i++)
	{
		int indexY=i/(data.width/2);
		int indexX=i%(data.width/2);

		//		blockTopLeft[(Width*indexY)+indexX]=oneMergeFilter[(Width*indexY)+indexX];
		blockTopLeft[i]=oneMergeFilter[(data.width*indexY)+indexX];
		blockTopLeft[i+indexForGray]=oneMergeFilterGray[(data.width*indexY)+indexX];
	}

	sendBuffer=util.convertIntToUintChar1D(blockTopLeft,data.width*data.height);

	//	int orgArraySize=(Width*Height)/compressedRateDWT;
	//
	int orgArraySize=(data.width*data.height)/2;
	//	save_pgm("/home/sklee25/Desktop/gray_depth_test.pgm",sendBuffer,data.width/2,data.height);
	//	getchar();


	client1.EstablishConnection("163.152.21.249",6000);
	client1.SendData(client1.sock, sendBuffer, orgArraySize);

	delete[] sendBuffer;
	delete[] blockTopLeft;
	delete[] oneMergeFilter;
	delete[] dwtOrgImage;
	delete[] oneMergeFilterGray;
	delete[] dwtGrayImage;

	sendBuffer=NULL;
	blockTopLeft=NULL;
	oneMergeFilter=NULL;
	dwtOrgImage=NULL;
	oneMergeFilterGray=NULL;
	dwtGrayImage=NULL;

	//	free(sendBuffer);
	//	free(blockTopLeft);
	//	free(oneMergeFilter);
	//	free(dwtOrgImage);
	//	getchar();

}

void DWTTestGray(Camera data)
{

	int compressedRateDWT=4;
	//	char* grayImage=data.rawCharDepthImage;

	double* dwtOrgImage=NULL;
	int* oneMergeFilter=NULL;
	char* sendBuffer=NULL;
	int* blockTopLeft=NULL;
	blockTopLeft=new int[(data.width*data.height)];

	util.startTimer();
	dwtOrgImage=util.convertChar1DToDouble1D(data.rawgrayImage,data.width,data.height);
	oneMergeFilter=encoder.getEncodedDWT(dwtOrgImage,data.width,data.height);
	util.getElapsedTime();

	//	save_pgm("/home/sklee25/Desktop/image_result_dwt/venus_synthesized_orig.pgm",sendBuffer,data.width,data.height);
	//ok

	//	int* orgIntSendBuffer=encoder.getDWTBlock(oneMergeFilter,Width,Height,compressedRateDWT);


	for(int i=0;i<(int)(data.width*data.height/4);i++)
	{
		int indexY=i/(data.width/2);
		int indexX=i%(data.width/2);

		//		blockTopLeft[(Width*indexY)+indexX]=oneMergeFilter[(Width*indexY)+indexX];
		blockTopLeft[i]=oneMergeFilter[(data.width*indexY)+indexX];
	}

	sendBuffer=util.convertIntToUintChar1D(blockTopLeft,data.width*data.height);

	//	int orgArraySize=(Width*Height)/compressedRateDWT;
	//
	int orgArraySize=(data.width*data.height)/compressedRateDWT;
	//	save_pgm("/home/sklee25/Desktop/image_result_dwt/3dwless_synthesized_orig.pgm",sendBuffer,data.width,data.height);
	//	getchar();
	//	client1.EstablishConnection("163.152.21.249",6000);
	//	client1.SendData(client1.sock, sendBuffer, orgArraySize);
	delete[] sendBuffer;
	delete[] blockTopLeft;
	delete[] oneMergeFilter;
	delete[] dwtOrgImage;

	sendBuffer=NULL;
	blockTopLeft=NULL;
	oneMergeFilter=NULL;
	dwtOrgImage=NULL;

	//	free(sendBuffer);
	//	free(blockTopLeft);
	//	free(oneMergeFilter);
	//	free(dwtOrgImage);
	//	getchar();

}
void storeDispVal_test4(Camera* data, int** returnVal, int* testVal)
{
	int widthIndex=0;
	int heightIndex=0;
	double valToSave=0;
	double valToSave2=0;

	int* expVal=new int[data->height*data->width];
	int expValIndex=0;
	for(int i=0;i<data->height*data->width/16;i++)
	{
		int indexY=expValIndex/(data->width);
		int indexX=expValIndex%(data->width);

		if(indexY%4!=0)
		{
			//			indexY++;
			expValIndex=data->width*3+expValIndex;
			i=i--;
		}
		else
		{
			expVal[data->width*indexY+indexX]=testVal[i];
			expVal[data->width*indexY+indexX+1]=testVal[i];
			expVal[data->width*indexY+indexX+2]=testVal[i];
			expVal[data->width*indexY+indexX+3]=testVal[i];
			expVal[data->width*(indexY+1)+indexX]=testVal[i];
			expVal[data->width*(indexY+1)+(indexX+1)]=testVal[i];
			expVal[data->width*(indexY+1)+(indexX+2)]=testVal[i];
			expVal[data->width*(indexY+1)+(indexX+3)]=testVal[i];
			expVal[data->width*(indexY+2)+(indexX)]=testVal[i];
			expVal[data->width*(indexY+2)+(indexX+1)]=testVal[i];
			expVal[data->width*(indexY+2)+(indexX+2)]=testVal[i];
			expVal[data->width*(indexY+2)+(indexX+3)]=testVal[i];
			expVal[data->width*(indexY+3)+(indexX)]=testVal[i];
			expVal[data->width*(indexY+3)+(indexX+1)]=testVal[i];
			expVal[data->width*(indexY+3)+(indexX+2)]=testVal[i];
			expVal[data->width*(indexY+3)+(indexX+3)]=testVal[i];
			expValIndex=expValIndex+4;
		}
		//		printf("%d %d\n",indexY,indexX);
	}
	int diffCount=0;
	for(int k=0;k<data->height*data->width;k++)
	{
		//						printf("%f\n",0.1236 * tan((double)data[0].rawdepthImage[i]/ 2842.5 + 1.1863));
		double raw_depth=(double)data->rawdepthImage[k];
		double raw_depth1=expVal[k];
		widthIndex=k%data->width;


		if (raw_depth < 2047)
		{
			//					fprintf(pFile,"%f,",(1.0 / (raw_depth * -0.0030711016 + 3.3309495161))*10);
			//			printf("%f,",(1.0 / (raw_depth * -0.0030711016 + 3.3309495161))*10);
			//
			//
			//			printf("--------------------%f\n",(1.0 / (raw_depth1 * -0.0030711016 + 3.3309495161))*10);
			int temp1=(int)((1.0 / (raw_depth * -0.0030711016 + 3.3309495161)))*10;
			int temp2=(int)((1.0 / (raw_depth1 * -0.0030711016 + 3.3309495161)))*10;

			if((temp1-temp2)!=0)
			{
				diffCount++;
			}

			valToSave=(1.0 / (raw_depth * -0.0030711016 + 3.3309495161))*10;
			valToSave2=(1.0 / (raw_depth1 * -0.0030711016 + 3.3309495161))*10;
			returnVal[heightIndex][widthIndex]=(int)valToSave2;
		}
		else
		{
			raw_depth=0;
			raw_depth1=0;
			int temp1=(int)((1.0 / (raw_depth * -0.0030711016 + 3.3309495161)))*10;
			int temp2=(int)((1.0 / (raw_depth1 * -0.0030711016 + 3.3309495161)))*10;



			valToSave=(1.0 / (raw_depth * -0.0030711016 + 3.3309495161))*10;
			valToSave2=(1.0 / (raw_depth * -0.0030711016 + 3.3309495161))*10;
			if((temp1-temp2)!=0)
			{
				diffCount++;
			}

			returnVal[heightIndex][widthIndex]=(int)valToSave2;
		}

		if(k%data->width==0 && k!=0)
		{
			//					fprintf(pFile,"\n");
			//			printf("\n");
			heightIndex++;
		}
	}
	printf("diff percentage is %f\n",(double)diffCount/(307200.00)*100);
	//	getchar();
}

void decodeBlock_2(Camera* data, int* expVal, int* testVal)
{
	int expValIndex=0;
	for(int i=0;i<(data->height*data->width)/4;i++)
	{
		int indexY=expValIndex/(data->width);
		int indexX=expValIndex%(data->width);
		if(indexY%2!=0)
		{
			//			indexY++;
			expValIndex=data->width+expValIndex;
			i--;
		}
		else
		{
			expVal[data->width*indexY+indexX]=testVal[i];
			expVal[data->width*indexY+indexX+1]=testVal[i];
			expVal[data->width*(indexY+1)+indexX]=testVal[i];
			expVal[data->width*(indexY+1)+(indexX+1)]=testVal[i];
			expValIndex=expValIndex+2;
		}
//				printf("%d %d\n",indexY,indexX);
	}
}

void diffTest(Camera* data, int* testVal)
{
	int widthIndex=0;
	int heightIndex=0;
	double valToSave=0;
	double valToSave2=0;


	int diffCount=0;
	for(int k=0;k<data->height*data->width;k++)
	{
		//						printf("%f\n",0.1236 * tan((double)data[0].rawdepthImage[i]/ 2842.5 + 1.1863));
		double raw_depth=(double)data->rawdepthImage[k];
		double raw_depth1=testVal[k];
		widthIndex=k%data->width;


		if (raw_depth < 2047)
		{
			//					fprintf(pFile,"%f,",(1.0 / (raw_depth * -0.0030711016 + 3.3309495161))*10);
			//			printf("%f,",(1.0 / (raw_depth * -0.0030711016 + 3.3309495161))*10);
			//
			//
			//			printf("--------------------%f\n",(1.0 / (raw_depth1 * -0.0030711016 + 3.3309495161))*10);
			int temp1=(int)((1.0 / (raw_depth * -0.0030711016 + 3.3309495161)))*10;
			int temp2=(int)((1.0 / (raw_depth1 * -0.0030711016 + 3.3309495161)))*10;

			if((temp1-temp2)!=0)
			{
				diffCount++;
			}
		}
		else
		{
			raw_depth=0;
			raw_depth1=0;
			int temp1=(int)((1.0 / (raw_depth * -0.0030711016 + 3.3309495161)))*10;
			int temp2=(int)((1.0 / (raw_depth1 * -0.0030711016 + 3.3309495161)))*10;

			if((temp1-temp2)!=0)
			{
				diffCount++;
			}

		}

		if(k%data->width==0 && k!=0)
		{
			//					fprintf(pFile,"\n");
			//			printf("\n");
			heightIndex++;
		}
	}
	printf("diff percentage is %f\n",(double)diffCount/(307200.00)*100);
	//	getchar();
}

void storeDispVal_block_method_2(Camera* data, int** returnVal, int* testVal)
{
	int widthIndex=0;
	int heightIndex=0;
	double valToSave=0;
	for(int k=0;k<data->height*data->width;k++)
	{
		//						printf("%f\n",0.1236 * tan((double)data[0].rawdepthImage[i]/ 2842.5 + 1.1863));
		double raw_depth=(double)testVal[k];
		widthIndex=k%data->width;

		if (raw_depth < 2047)
		{
			//					fprintf(pFile,"%f,",(1.0 / (raw_depth * -0.0030711016 + 3.3309495161))*10);
//						printf("%f,",(1.0 / (raw_depth * -0.0030711016 + 3.3309495161))*10);
			valToSave=(1.0 / (raw_depth * -0.0030711016 + 3.3309495161))*10;
			returnVal[heightIndex][widthIndex]=(int)valToSave;
		}
		else
		{
			raw_depth=0;
			valToSave=(1.0 / (raw_depth * -0.0030711016 + 3.3309495161))*10;
			returnVal[heightIndex][widthIndex]=(int)valToSave;
		}

		if(k%data->width==0 && k!=0)
		{
			//					fprintf(pFile,"\n");
//						printf("\n");
			heightIndex++;
		}
	}
}
//Backup for getting the disparity value from the depth map
void storeDispVal(Camera* data, int** returnVal)
{
	int widthIndex=0;
	int heightIndex=0;
	double valToSave=0;
	for(int k=0;k<data->height*data->width;k++)
	{
		//						printf("%f\n",0.1236 * tan((double)data[0].rawdepthImage[i]/ 2842.5 + 1.1863));
		double raw_depth=(double)data->rawdepthImage[k];
		widthIndex=k%data->width;

		if (raw_depth < 2047)
		{
			//					fprintf(pFile,"%f,",(1.0 / (raw_depth * -0.0030711016 + 3.3309495161))*10);
			//			printf("%f,",(1.0 / (raw_depth * -0.0030711016 + 3.3309495161))*10);
			valToSave=(1.0 / (raw_depth * -0.0030711016 + 3.3309495161))*10;
			returnVal[heightIndex][widthIndex]=(int)valToSave;
		}
		else
		{
			raw_depth=0;
			valToSave=(1.0 / (raw_depth * -0.0030711016 + 3.3309495161))*10;
			returnVal[heightIndex][widthIndex]=(int)valToSave;
		}

		if(k%data->width==0 && k!=0)
		{
			//					fprintf(pFile,"\n");
			//			printf("\n");
			heightIndex++;
		}
	}
}

void writeDispValToFile(Camera* data)
{
	FILE * pFile;
	pFile = fopen ("/home/sklee25/Desktop/dVal.txt","w");
	for(int i=0;i<data->height*data->width;i++)
	{
		//						printf("%f\n",0.1236 * tan((double)data[0].rawdepthImage[i]/ 2842.5 + 1.1863));
		double raw_depth=(double)data->rawdepthImage[i];
		if(i%data[0].width==0 && i!=0)
		{
			fprintf(pFile,"\n");
		}

		if (raw_depth < 2047)
		{
			fprintf(pFile,"%f,",(1.0 / (raw_depth * -0.0030711016 + 3.3309495161))*10);
		}
		else
		{
			raw_depth=0;
			fprintf(pFile,"%f,",(1.0 / (raw_depth * -0.0030711016 + 3.3309495161))*10);
		}
	}
	fclose (pFile);
}

IplImage* getSynthesizedImage_gray(IplImage* leftIm, IplImage* rightIm, int** dispMapMat, double alpha)
{
	int dispVal=0;
	IplImage *iirImage = cvCreateImage( cvSize(rightIm->width, rightIm->height), IPL_DEPTH_8U, 1);
	IplImage *iImage = cvCreateImage( cvSize(rightIm->width, rightIm->height), IPL_DEPTH_8U, 1);


	for(int i=0;i<rightIm->height;i++)
	{
		for(int j=0;j<rightIm->width;j++)
		{
			int pixel=((uchar*)(rightIm->imageData+i*rightIm->widthStep))[j];

			dispVal=dispMapMat[i][j];
			double temp_iirX=j+(1-alpha)*dispVal;
			int iirX=(int)temp_iirX;

			int iirY=i;
			((uchar*)(iirImage->imageData+iirY*iirImage->widthStep))[iirX]=pixel;
		}
	}

	for(int i=0;i<leftIm->height;i++)
	{
		for(int j=0;j<leftIm->width;j++)
		{
			//Method without left+dispVal*alpha
			//			int leftImgPixel=((uchar*)(leftImGray->imageData+i*leftImGray->widthStep))[j];

			//Method with left+dispVal*alpha
			int newX=j+(alpha*dispMapMat[i][j]);
			int leftImgPixel=((uchar*)(leftIm->imageData+i*leftIm->widthStep))[newX];

			int rightImgPixel=((uchar*)(iirImage->imageData+i*iirImage->widthStep))[j];

			if(rightImgPixel==0)
			{
				((uchar*)(iImage->imageData+i*iImage->widthStep))[j]=leftImgPixel;
			}
			else
			{
				((uchar*)(iImage->imageData+i*iImage->widthStep))[j]=rightImgPixel;
			}
		}
	}
	return iImage;
}


IplImage* getSynthesizedImage(IplImage* leftIm, IplImage* rightIm, int** dispMapMat, double alpha)
{
	IplImage* returnVal;
	int dispVal=0;
	IplImage *iirCImage = cvCreateImage( cvSize(rightIm->width, rightIm->height), IPL_DEPTH_8U, 3 );
	IplImage *iilCImage = cvCreateImage( cvSize(rightIm->width, rightIm->height), IPL_DEPTH_8U, 3 );
	IplImage *iCImage = cvCreateImage( cvSize(rightIm->width, rightIm->height), IPL_DEPTH_8U, 3 );

#ifdef _GRAY
	for(int i=0;i<rightImGray->height;i++)
	{
		for(int j=0;j<rightImGray->width;j++)
		{
			int pixel=((uchar*)(rightImGray->imageData+i*rightImGray->widthStep))[j];

			dispVal=dispMapMat[i][j];
			double temp_iirX=j+(1-alpha)*dispVal;
			int iirX=(int)temp_iirX;

			int iirY=i;
			((uchar*)(iirImage->imageData+iirY*iirImage->widthStep))[iirX]=pixel;
		}
	}
#endif

	//	getDispMapFromSynthesizedImage(iirImage,rightImGray);

	for(int i=0;i<rightIm->height;i++)
	{
		for(int j=0;j<rightIm->width;j++)
		{
			int pixelB=((uchar *)(rightIm->imageData + i*rightIm->widthStep))[j*rightIm->nChannels + 0]; // B
			int pixelG=((uchar *)(rightIm->imageData + i*rightIm->widthStep))[j*rightIm->nChannels + 1]; // G
			int pixelR=((uchar *)(rightIm->imageData + i*rightIm->widthStep))[j*rightIm->nChannels + 2]; // R

			dispVal=dispMapMat[i][j];
			double temp_iirX=j+(1-alpha)*dispVal;
			int iirX=(int)temp_iirX;

			int iirY=i;
			((uchar *)(iirCImage->imageData + iirY*iirCImage->widthStep))[iirX*iirCImage->nChannels + 0]=pixelB; // B
			((uchar *)(iirCImage->imageData + iirY*iirCImage->widthStep))[iirX*iirCImage->nChannels + 1]=pixelG; // G
			((uchar *)(iirCImage->imageData + iirY*iirCImage->widthStep))[iirX*iirCImage->nChannels + 2]=pixelR; // R
		}
	}


	for(int i=0;i<leftIm->height;i++)
	{
		for(int j=0;j<leftIm->width;j++)
		{
			//Method without left+dispVal*alpha
			//				int pixelLB=((uchar *)(leftIm->imageData + i*leftIm->widthStep))[j*leftIm->nChannels + 0]; // B
			//				int pixelLG=((uchar *)(leftIm->imageData + i*leftIm->widthStep))[j*leftIm->nChannels + 1]; // G
			//				int pixelLR=((uchar *)(leftIm->imageData + i*leftIm->widthStep))[j*leftIm->nChannels + 2]; // R

			//Method with left+dispVal*alpha
			int newX=j+(alpha*dispMapMat[i][j]);
			int pixelLB=((uchar *)(leftIm->imageData + i*leftIm->widthStep))[newX*leftIm->nChannels + 0]; // B
			int pixelLG=((uchar *)(leftIm->imageData + i*leftIm->widthStep))[newX*leftIm->nChannels + 1]; // G
			int pixelLR=((uchar *)(leftIm->imageData + i*leftIm->widthStep))[newX*leftIm->nChannels + 2]; // R

			int pixelRB=((uchar *)(iirCImage->imageData + i*iirCImage->widthStep))[j*iirCImage->nChannels + 0]; // B
			int pixelRG=((uchar *)(iirCImage->imageData + i*iirCImage->widthStep))[j*iirCImage->nChannels + 1]; // G
			int pixelRR=((uchar *)(iirCImage->imageData + i*iirCImage->widthStep))[j*iirCImage->nChannels + 2]; // R

			if(pixelRB==0 && pixelRG==0 && pixelRR==0)
			{
				//					((uchar*)(iImage->imageData+i*iImage->widthStep))[j]=leftImgPixel;
				((uchar *)(iCImage->imageData + i*iCImage->widthStep))[j*iCImage->nChannels + 0]=pixelLB; // B
				((uchar *)(iCImage->imageData + i*iCImage->widthStep))[j*iCImage->nChannels + 1]=pixelLG; // G
				((uchar *)(iCImage->imageData + i*iCImage->widthStep))[j*iCImage->nChannels + 2]=pixelLR; // R

			}
			else
			{
				//					((uchar*)(iImage->imageData+i*iImage->widthStep))[j]=rightImgPixel;
				((uchar *)(iCImage->imageData + i*iCImage->widthStep))[j*iCImage->nChannels + 0]=pixelRB; // B
				((uchar *)(iCImage->imageData + i*iCImage->widthStep))[j*iCImage->nChannels + 1]=pixelRG; // G
				((uchar *)(iCImage->imageData + i*iCImage->widthStep))[j*iCImage->nChannels + 2]=pixelRR; // R
			}
		}
	}


	return iCImage;
}

//divide the images into 2*2 matrix
void encodeDepthBlock_2(short* orgArray, int* returnVal, int width, int height)
{
	int depthHolder=0;

	int returnValIndex=0;

	for(int i=0;i<width*height;i=i+2)
	{
		int indexY=i/(width);
		int indexX=i%(width);
		if(indexY%2!=0)
		{
			//			indexY++;
			i=i+width-2;
		}
		else
		{
			depthHolder=(int)(orgArray[i]+orgArray[i+1]+orgArray[i+width]+orgArray[i+width+1])/4;
			returnVal[returnValIndex]=depthHolder;
			returnValIndex++;
			//			printf("%d  %d\n",indexY,indexX);
		}
	}
}

//divide the images into 4*4 matrix
int* blockTest4(short* orgArray, int width, int height)
{
	int* returnVal=new int[width*height/4];
	int depthHolder=0;
	int depthHolder1=0;
	int depthHolder2=0;
	int depthHolder3=0;

	int returnValIndex=0;

	for(int i=0;i<width*height;i=i+4)
	{
		int indexY=i/(width);
		int indexX=i%(width);
		if(indexY%4!=0)
		{
			//			indexY++;
			i=i+width-4;
		}
		else
		{
			depthHolder=(int)(orgArray[i]+orgArray[i+1]+orgArray[i+2]+orgArray[i+3])/4;
			depthHolder1=(int)(orgArray[i+width]+orgArray[i+(width+1)]+orgArray[i+(width+2)]+orgArray[i+(width+3)])/4;
			depthHolder2=(int)(orgArray[i+width*2]+orgArray[i+(width*2+1)]+orgArray[i+(width*2+2)]+orgArray[i+(width*2+3)])/4;
			depthHolder3=(int)(orgArray[i+width*3]+orgArray[i+(width*3+1)]+orgArray[i+(width*3+2)]+orgArray[i+(width*3+3)])/4;
			returnVal[returnValIndex]=(depthHolder+depthHolder1+depthHolder2+depthHolder3)/4;
			returnValIndex++;
			//			printf("%d  %d\n",indexY,indexX);
		}
	}
	//	getchar();
	return returnVal;
}


int main(int argc, char **argv) {
	int NumOfGrabbedImages=0;
	initKinect();

	Camera data[numOfCamera];//=new Camera[numOfCamera];
	for(int i=0;i<numOfCamera;i++)
	{
		data[i].init(i);
	}

	//	char rgbWindowName[100];
	//	char depthWindowName[100];
	//	for(int i=0;i<numOfCamera;i++)
	//	{
	//		sprintf(rgbWindowName,"image_image%d",i);
	//		sprintf(depthWindowName,"depth_image%d",i);
	//		cvNamedWindow(rgbWindowName, CV_WINDOW_AUTOSIZE);
	//		cvNamedWindow(depthWindowName, CV_WINDOW_AUTOSIZE);
	//
	//	}
	if(proximityViewEnabled==true)
	{
		cvNamedWindow("main_display", CV_WINDOW_AUTOSIZE);
	}

	//	TCPClientSocket client1;
	//	client1.EstablishConnection("163.152.21.249",6000);

	int** realDepthVal=0;
	realDepthVal=new int*[data[0].height];
	for(int i=0;i<data[0].height;i++)
	{
		realDepthVal[i]=new int[data[0].width];
	}
	int* encodedBlock=new int[data[0].width*data[0].height/4];
	int* decodedBlock=new int[data[0].height*data[0].width];

	while(1)
	{
		for(int i=0;i<numOfCamera;i++)
		{
			//						data[i].rawrgbImage=GrabKinectRGBImage(i);
			GrabKinectGrayImage(data[i]);
			data[i].rawdepthImage=GrabKinectDepthImage(data[i]);
			data[i].depthImage=convertGrayArrayToIplImage(data[i].rawdepthImage,data[i].height,data[i].width);

			//			data[i].rgbImage=convertColorArrayToIplImage(data[i].rawrgbImage, data[i].height, data[i].width);
			//			cvSaveImage("/home/sklee25/Desktop/depth_orig.pgm",data[i].depthImage);
			//			save_pgm("/home/sklee25/Desktop/gray_orig.pgm",data[i].rawgrayImage,640,480);

			//			DWTTest(data[i]);
			//						DWTTestMerge(data[i]);
			//			DWTTestGray(data[i]);
			//			delete[] data[i].rawgrayImage;
			//						delete[] data[i].rawrgbImage;
		}

		encodeDepthBlock_2(data[0].rawdepthImage, encodedBlock, data[0].width, data[0].height);
		decodeBlock_2(&data[0],decodedBlock,encodedBlock);
		diffTest(&data[0],decodedBlock);
//		getchar();
//		storeDispVal_block_method_2(&data[0],realDepthVal,decodedBlock);
//				storeDispVal(&data[0],realDepthVal);


		//		IplImage* convertedDepthImage=convertIntGrayArrayToIplImage(expVal,data[0].height,data[0].width);

		//		cvSaveImage("/home/sklee25/Desktop/convertedDepthImage.pgm",convertedDepthImage);
		//		cvSaveImage("/home/sklee25/Desktop/originalDepthImage.pgm",data[0].depthImage);
		//		printf("Done with saving\n");
		//		getchar();


		//For real-time intermediate view synthesis
		//		storeDispVal(&data[0],intReturnVal);
		//				data[0].rgbImage=convertColorArrayToIplImage(data[0].rawrgbImage,data[0].height,data[0].width);
		//				IplImage* ilImage=getSynthesizedImage(data[0].rgbImage,data[0].rgbImage,intReturnVal,0.1);

		//for gray
		data[0].grayImage=convertCharGrayArrayToIplImage(data[0].rawgrayImage,data[0].height,data[0].width);
		data[0].intermediateImage=getSynthesizedImage_gray(data[0].grayImage,data[0].grayImage,realDepthVal,0.5);
//		cvNamedWindow("main", CV_WINDOW_AUTOSIZE);
//		cvNamedWindow("right", CV_WINDOW_AUTOSIZE);
		cvShowImage("main", data[0].intermediateImage);
		cvShowImage("right", data[0].depthImage);


		//For displaying the view from the client side
		//		for(int i=0;i<numOfCamera;i++)
		//		{
		//			sprintf(rgbWindowName,"image_image%d",i);
		//			sprintf(depthWindowName,"depth_image%d",i);
		//
		//			cvShowImage(rgbWindowName, data[i].rgbImage);
		//			cvShowImage(depthWindowName, data[i].depthImage);
		//
		//		}

		//proximity view switch implementation-start
		if(proximityViewEnabled==true)
		{
			int cameraID=proximityViewSwitch(data[0].rawdepthImage,data[1].rawdepthImage,data[0].height, data[0].width);
			if(cameraID==1)
			{
				cvShowImage("main_display", data[1].depthImage);
			}
			else
			{
				cvShowImage("main_display", data[0].depthImage);

			}
		}
		//proximity view switch implementation-end

		cvWaitKey(2);
		for(int i=0;i<numOfCamera;i++)
		{
			cvReleaseImage(&data[i].rgbImage);
			cvReleaseImage(&data[i].depthImage);
			cvReleaseImage(&data[i].grayImage);
			cvReleaseImage(&data[i].intermediateImage);
		}
		//		printf("%d\n",NumOfGrabbedImages);
		NumOfGrabbedImages++;
	}

	//Works with the video callback function
	/****************************************************************************************************************************/
	//	int res;
	//
	//	depth_mid = (char*)malloc(640*480*3);
	//	depth_front = (char*)malloc(640*480*3);
	//
	//	printf("Kinect camera test\n");
	//
	//	int i;
	//	for (i=0; i<2048; i++) {
	//		float v = i/2048.0;
	//		v = powf(v, 3)* 6;
	//		t_gamma[i] = v*6*256;
	//	}
	//
	//	g_argc = argc;
	//	g_argv = argv;
	//
	//	if (freenect_init(&f_ctx, NULL) < 0) {
	//		printf("freenect_init() failed\n");
	//		return 1;
	//	}
	//
	//	freenect_set_log_level(f_ctx, FREENECT_LOG_DEBUG);
	//	freenect_select_subdevices(f_ctx, (freenect_device_flags)(FREENECT_DEVICE_MOTOR | FREENECT_DEVICE_CAMERA));
	//
	//	int nr_devices = freenect_num_devices (f_ctx);
	//	printf ("Number of devices found: %d\n", nr_devices);
	//
	//	int user_device_number = 0;
	//	if (argc > 1)
	//		user_device_number = atoi(argv[1]);
	//
	//	if (nr_devices < 1)
	//		return 1;
	//
	//	if (freenect_open_device(f_ctx, &f_dev, user_device_number) < 0) {
	//		printf("Could not open device\n");
	//		return 1;
	//	}
	//
	//	RunKinect();
	/****************************************************************************************************************************/

	//Actual part where the threads begin to grab the images
	//////////////////////////////////////////////////////////////////////
	//	res = pthread_create(&freenect_thread, NULL, freenect_threadfunc, NULL);
	//	if (res) {
	//		printf("pthread_create failed\n");
	//		return 1;
	//	}
	//
	//	// OS X requires GLUT to run on the main thread
	//	gl_threadfunc(NULL);

	cout << "!!!Hello World!!!" << endl; // prints !!!Hello World!!!
	return 0;
}

void blockData()
{
	//		int* blockVal=blockTest(data[0].rawdepthImage, data[0].width, data[0].height);
	//		storeDispVal_test(&data[0],intReturnVal,blockVal);

	//		//////////////////////////////////////////////////
	//		int* expVal=new int[data[0].height*data[0].width];
	//		int expValIndex=0;
	//		for(int i=0;i<data[0].height*data[0].width/16;i++)
	//		{
	//			int indexY=expValIndex/(data[0].width);
	//			int indexX=expValIndex%(data[0].width);
	//
	//			if(indexY%4!=0)
	//			{
	//				//			indexY++;
	//				expValIndex=data[0].width*3+expValIndex;
	//				i=i--;
	//			}
	//			else
	//			{
	//				expVal[data[0].width*indexY+indexX]=blockVal[i];
	//				expVal[data[0].width*indexY+indexX+1]=blockVal[i];
	//				expVal[data[0].width*indexY+indexX+2]=blockVal[i];
	//				expVal[data[0].width*indexY+indexX+3]=blockVal[i];
	//				expVal[data[0].width*(indexY+1)+indexX]=blockVal[i];
	//				expVal[data[0].width*(indexY+1)+(indexX+1)]=blockVal[i];
	//				expVal[data[0].width*(indexY+1)+(indexX+2)]=blockVal[i];
	//				expVal[data[0].width*(indexY+1)+(indexX+3)]=blockVal[i];
	//				expVal[data[0].width*(indexY+2)+(indexX)]=blockVal[i];
	//				expVal[data[0].width*(indexY+2)+(indexX+1)]=blockVal[i];
	//				expVal[data[0].width*(indexY+2)+(indexX+2)]=blockVal[i];
	//				expVal[data[0].width*(indexY+2)+(indexX+3)]=blockVal[i];
	//				expVal[data[0].width*(indexY+3)+(indexX)]=blockVal[i];
	//				expVal[data[0].width*(indexY+3)+(indexX+1)]=blockVal[i];
	//				expVal[data[0].width*(indexY+3)+(indexX+2)]=blockVal[i];
	//				expVal[data[0].width*(indexY+3)+(indexX+3)]=blockVal[i];
	//				expValIndex=expValIndex+4;
	//			}
	////			printf("%d %d\n",indexY,indexX);
	//		}
	//		//////////////////////////////////////////////////
}

